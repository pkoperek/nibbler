apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'application'

// jetty runner class
mainClassName = 'org.eclipse.jetty.runner.Runner'

configurations {
    container // group for jetty container used to run webapp from ./gradlew jettyRun
}

repositories
{
    mavenCentral()

    maven {
        url "http://repo.spray.io/"
    }

}

dependencies {
    // scala! 
    compile group: 'org.scala-lang', name: 'scala-library', version: '2.10'

    // scalatra deps
    compile group: 'org.scalatra', name: 'scalatra_2.10', version: '2.3.0'
    compile group: 'org.scalatra', name: 'scalatra-scalate_2.10', version: '2.3.0'

    // spray json
    compile group: 'io.spray', name: 'spray-json_2.10', version: '1.2.6'

    // container used to run from gradle
    container group: 'org.eclipse.jetty', name: 'jetty-runner', version: '9.2.1.v20140609'

    // servlet api
    providedCompile group: 'org.eclipse.jetty.orbit', name: 'javax.servlet', version: '3.0.0.v201112011016'

    // spark 
    compile ('org.apache.spark:spark-core_2.10:1.0.0')

    // hadoop-client
    compile group: 'org.apache.hadoop', name: 'hadoop-client', version: '2.2.0'
}

// manually specify gradle version for gradlew
task wrapper(type: Wrapper) {
    distributionUrl = "http://services.gradle.org/distributions/gradle-2.0-bin.zip"
}

war {
    classpath = configurations.compile
}

// explode war - in fact just copies deps + web.xml
task explodedWar(type: Copy) {
    into "$buildDir/exploded"
    with war
}

// add application's jar file to lib
task addJarToExplodedWar(type: Copy) {
    into "$buildDir/exploded/WEB-INF/lib"
    from jar.archivePath
}
addJarToExplodedWar.dependsOn jar
addJarToExplodedWar.dependsOn explodedWar

// runs jetty
task jettyRun(type: JavaExec) {
    main = "org.eclipse.jetty.runner.Runner"
    args = ["$buildDir/exploded"]
    classpath configurations.container
}
jettyRun.dependsOn addJarToExplodedWar

// include war file
applicationDistribution.from("$buildDir/exploded") {
    into("webapp")
}

// include container
applicationDistribution.from("$buildDir/container") {
    into("lib")
}

applicationDefaultJvmArgs = ["-Djava.net.preferIPv4Stack=true"]

// prepare container 
task prepareContainer(type: Copy) {
    from configurations.container
    into 'build/container'
}

startScripts {
    classpath = configurations.container

    doLast {
        unixScript.text = unixScript.text.replace("$mainClassName", "$mainClassName \$APP_HOME/webapp")
    }
}

distZip {
    // remove all jars added by default by application plugin
    def toExclude = [jar.archiveName]
    configurations.runtime.each { dependency ->
        toExclude.add(dependency.getName())
    }
    excludes = toExclude
}
distZip.dependsOn prepareContainer
distZip.dependsOn addJarToExplodedWar

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
        scopes.PROVIDED.plus += [configurations.providedCompile]
    }
}